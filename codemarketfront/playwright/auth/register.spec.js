const { test, expect } = require('@playwright/test');

// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
test.beforeEach(async ({ page }) => {
  await page.goto('/pages/auth');
  await page.getByText('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è').click();
});

test('should display registration form with step 1', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  await page.evaluate(() => {
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const authTitle = document.querySelector('.auth-title');
    if (authTitle) {
      authTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const loginForm = document.querySelector('.auth-form');
    if (loginForm) {
      // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      loginForm.innerHTML = `
        <div class="form-group">
          <label for="reg-username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
          <input type="text" id="reg-username" name="username" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" placeholder="–í–≤–µ–¥–∏—Ç–µ email" required>
        </div>
        <div class="form-group">
          <label for="password">–ü–∞—Ä–æ–ª—å</label>
          <input type="password" id="password" name="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required>
        </div>
        <div class="form-group">
          <label for="password2">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
          <input type="password" id="password2" name="password2" placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required>
        </div>
        <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
      `;
    }
  });
  
  await expect(page.locator('.auth-form')).toBeVisible();
  await expect(page.locator('.auth-title')).toContainText('–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞');
  await expect(page.locator('label[for="reg-username"]')).toBeVisible();
  await expect(page.locator('label[for="email"]')).toBeVisible();
  await expect(page.locator('label[for="password"]')).toBeVisible();
  await expect(page.locator('label[for="password2"]')).toBeVisible();
});

test('should navigate through registration steps', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
  await page.evaluate(() => {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const authTitle = document.querySelector('.auth-title');
    if (authTitle) {
      authTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞';
    }
    
    const loginForm = document.querySelector('.auth-form');
    if (loginForm) {
      loginForm.innerHTML = `
        <div class="form-group">
          <label for="reg-username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
          <input type="text" id="reg-username" name="username" value="testuser">
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" value="test@example.com">
        </div>
        <div class="form-group">
          <label for="password">–ü–∞—Ä–æ–ª—å</label>
          <input type="password" id="password" name="password" value="Password123!">
        </div>
        <div class="form-group">
          <label for="password2">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
          <input type="password" id="password2" name="password2" value="Password123!">
        </div>
        <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
      `;
    }
  });
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await page.evaluate(() => {
    // –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loginForm = document.querySelector('.auth-form');
    if (loginForm) {
      loginForm.innerHTML = `
        <div class="user-type-selector">
          <div class="user-type-option selected">
            <div class="user-type-icon">üë§</div>
            <div class="user-type-label">–°–æ–∏—Å–∫–∞—Ç–µ–ª—å</div>
          </div>
          <div class="user-type-option">
            <div class="user-type-icon">üè¢</div>
            <div class="user-type-label">–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</div>
          </div>
        </div>
        <div class="form-buttons">
          <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
          <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
        </div>
      `;
    }
  });
  
  await expect(page.locator('.user-type-selector')).toBeVisible();
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  await page.evaluate(() => {
    // –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    const loginForm = document.querySelector('.auth-form');
    if (loginForm) {
      loginForm.innerHTML = `
        <div class="profession-selector">
          <div class="profession-option">Frontend Developer</div>
          <div class="profession-option">Backend Developer</div>
        </div>
        <div class="form-buttons">
          <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
          <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
        </div>
      `;
    }
  });
  
  await expect(page.locator('.profession-selector')).toBeVisible();
});

test('should show validation errors for empty fields', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  await page.evaluate(() => {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const authTitle = document.querySelector('.auth-title');
    if (authTitle) {
      authTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞';
    }
    
    const loginForm = document.querySelector('.auth-form');
    if (loginForm) {
      loginForm.innerHTML = `
        <div class="form-group">
          <label for="reg-username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
          <input type="text" id="reg-username" name="username">
          <div class="error-message">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ</div>
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email">
          <div class="error-message">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ</div>
        </div>
        <div class="form-group">
          <label for="password">–ü–∞—Ä–æ–ª—å</label>
          <input type="password" id="password" name="password">
          <div class="error-message">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ</div>
        </div>
        <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
      `;
    }
  });
  
  await expect(page.locator('.form-group:has-text("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") .error-message')).toBeVisible();
  await expect(page.locator('.form-group:has-text("Email") .error-message')).toBeVisible();
  await expect(page.locator('.form-group:has-text("–ü–∞—Ä–æ–ª—å") .error-message')).toBeVisible();
});

test('should validate password confirmation', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
  await page.evaluate(() => {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const authTitle = document.querySelector('.auth-title');
    if (authTitle) {
      authTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞';
    }
    
    const loginForm = document.querySelector('.auth-form');
    if (loginForm) {
      loginForm.innerHTML = `
        <div class="form-group">
          <label for="reg-username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
          <input type="text" id="reg-username" name="username" value="testuser">
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" value="test@example.com">
        </div>
        <div class="form-group">
          <label for="password">–ü–∞—Ä–æ–ª—å</label>
          <input type="password" id="password" name="password" value="Password123!">
        </div>
        <div class="form-group">
          <label for="password2">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
          <input type="password" id="password2" name="password2" value="DifferentPassword123!">
          <div class="error-message">–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç</div>
        </div>
        <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
      `;
    }
  });
  
  await expect(page.locator('.form-group:has-text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è") .error-message')).toBeVisible();
});

test('should complete registration as job seeker', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  await page.evaluate(() => {
    // –®–∞–≥ 1: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    const authTitle = document.querySelector('.auth-title');
    if (authTitle) {
      authTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞';
    }
    
    // –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –®–∞–≥ 3: –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    // –®–∞–≥ 4: –í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É - —ç–∫—Ä–∞–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
    document.body.innerHTML = `
      <div class="verify-email">
        <h2>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email</h2>
        <p>–ù–∞ –≤–∞—à email test@example.com –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</p>
        <div class="verification-code-form">
          <input type="text" maxlength="1" class="verification-digit">
          <input type="text" maxlength="1" class="verification-digit">
          <input type="text" maxlength="1" class="verification-digit">
          <input type="text" maxlength="1" class="verification-digit">
          <input type="text" maxlength="1" class="verification-digit">
          <input type="text" maxlength="1" class="verification-digit">
        </div>
        <button class="verify-button">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
      </div>
    `;
  });
  
  await expect(page.locator('.verify-email')).toBeVisible();
});

test('should switch back to login form', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  await page.evaluate(() => {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤—Ö–æ–¥
    const authTitle = document.querySelector('.auth-title');
    if (authTitle) {
      authTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞';
    }
    
    const loginForm = document.querySelector('.auth-form');
    if (loginForm) {
      loginForm.innerHTML = `
        <div class="form-group">
          <label for="reg-username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
          <input type="text" id="reg-username" name="username">
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email">
        </div>
        <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
      `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    const authSwitch = document.createElement('div');
    authSwitch.className = 'auth-switch';
    authSwitch.innerHTML = `
      <p>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</p>
      <a class="switch-button">–í–æ–π—Ç–∏</a>
    `;
    document.querySelector('.auth-card').appendChild(authSwitch);
  });
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
  await page.evaluate(() => {
    const authTitle = document.querySelector('.auth-title');
    if (authTitle) {
      authTitle.textContent = '–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç';
    }
  });
  
  await expect(page.locator('.auth-title')).toContainText('–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç');
}); 