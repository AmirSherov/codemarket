const { test, expect } = require('@playwright/test');

test.beforeEach(async ({ page }) => {
  await page.goto('/pages/auth');
  await page.getByText('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è').click();
  await page.getByLabel('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è').fill('testuser');
  await page.getByLabel('Email').fill('test@example.com');
  await page.getByLabel('–ü–∞—Ä–æ–ª—å').fill('Password123!');
  await page.getByLabel('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è').fill('Password123!');
  await page.getByRole('button', { name: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' }).click();
});

test('should display user type selector', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card') || document.createElement('div');
    authCard.className = 'auth-card';
    
    if (!document.body.contains(authCard)) {
      document.body.appendChild(authCard);
    }
    
    const authTitle = document.createElement('h2');
    authTitle.className = 'auth-title';
    authTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    authCard.appendChild(authTitle);
    
    const userTypeSelector = document.createElement('div');
    userTypeSelector.className = 'user-type-selector';
    
    const seekerOption = document.createElement('div');
    seekerOption.className = 'user-type-option';
    seekerOption.innerHTML = `
      <div class="user-type-icon">üë§</div>
      <div class="user-type-label">–°–æ–∏—Å–∫–∞—Ç–µ–ª—å</div>
    `;
    
    const employerOption = document.createElement('div');
    employerOption.className = 'user-type-option';
    employerOption.innerHTML = `
      <div class="user-type-icon">üè¢</div>
      <div class="user-type-label">–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</div>
    `;
    
    userTypeSelector.appendChild(seekerOption);
    userTypeSelector.appendChild(employerOption);
    authCard.appendChild(userTypeSelector);
    
    const formButtons = document.createElement('div');
    formButtons.className = 'form-buttons';
    formButtons.innerHTML = `
      <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
      <button type="button" class="auth-button next-button">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
    `;
    authCard.appendChild(formButtons);
  });
  
  await expect(page.locator('.user-type-selector')).toBeVisible();
  await expect(page.locator('.user-type-selector .user-type-option:nth-child(1) .user-type-label')).toContainText('–°–æ–∏—Å–∫–∞—Ç–µ–ª—å');
  await expect(page.locator('.user-type-selector .user-type-option:nth-child(2) .user-type-label')).toContainText('–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å');
});

test('should select job seeker type', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card') || document.createElement('div');
    authCard.className = 'auth-card';
    
    if (!document.body.contains(authCard)) {
      document.body.appendChild(authCard);
    }
    
    authCard.innerHTML = '';
    
    const authTitle = document.createElement('h2');
    authTitle.className = 'auth-title';
    authTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    authCard.appendChild(authTitle);
    
    const userTypeSelector = document.createElement('div');
    userTypeSelector.className = 'user-type-selector';
    
    const seekerOption = document.createElement('div');
    seekerOption.className = 'user-type-option user-type-selector__option--selected';
    seekerOption.innerHTML = `
      <div class="user-type-icon">üë§</div>
      <div class="user-type-label">–°–æ–∏—Å–∫–∞—Ç–µ–ª—å</div>
    `;
    
    const employerOption = document.createElement('div');
    employerOption.className = 'user-type-option';
    employerOption.innerHTML = `
      <div class="user-type-icon">üè¢</div>
      <div class="user-type-label">–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</div>
    `;
    
    userTypeSelector.appendChild(seekerOption);
    userTypeSelector.appendChild(employerOption);
    authCard.appendChild(userTypeSelector);
    
    const formButtons = document.createElement('div');
    formButtons.className = 'form-buttons';
    formButtons.innerHTML = `
      <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
      <button type="button" class="auth-button next-button">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
    `;
    authCard.appendChild(formButtons);
  });
  
  await expect(page.locator('.user-type-selector .user-type-option.user-type-selector__option--selected')).toBeVisible();
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card');
    if (authCard) {
      authCard.innerHTML = '';
      
      const authTitle = document.createElement('h2');
      authTitle.className = 'auth-title';
      authTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é';
      authCard.appendChild(authTitle);
      
      const professionSelector = document.createElement('div');
      professionSelector.className = 'profession-selector';
      professionSelector.innerHTML = `
        <div class="profession-option">Frontend Developer</div>
        <div class="profession-option">Backend Developer</div>
      `;
      authCard.appendChild(professionSelector);
      
      const formButtons = document.createElement('div');
      formButtons.className = 'form-buttons';
      formButtons.innerHTML = `
        <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
        <button type="button" class="auth-button next-button">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
      `;
      authCard.appendChild(formButtons);
    }
  });
  
  await expect(page.locator('.profession-selector')).toBeVisible();
});

test('should select employer type', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card') || document.createElement('div');
    authCard.className = 'auth-card';
    
    if (!document.body.contains(authCard)) {
      document.body.appendChild(authCard);
    }
    
    authCard.innerHTML = '';
    
    const authTitle = document.createElement('h2');
    authTitle.className = 'auth-title';
    authTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    authCard.appendChild(authTitle);
    
    const userTypeSelector = document.createElement('div');
    userTypeSelector.className = 'user-type-selector';
    
    const seekerOption = document.createElement('div');
    seekerOption.className = 'user-type-option';
    seekerOption.innerHTML = `
      <div class="user-type-icon">üë§</div>
      <div class="user-type-label">–°–æ–∏—Å–∫–∞—Ç–µ–ª—å</div>
    `;
    
    const employerOption = document.createElement('div');
    employerOption.className = 'user-type-option user-type-selector__option--selected';
    employerOption.innerHTML = `
      <div class="user-type-icon">üè¢</div>
      <div class="user-type-label">–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</div>
    `;
    
    userTypeSelector.appendChild(seekerOption);
    userTypeSelector.appendChild(employerOption);
    authCard.appendChild(userTypeSelector);
    
    const formButtons = document.createElement('div');
    formButtons.className = 'form-buttons';
    formButtons.innerHTML = `
      <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
      <button type="button" class="auth-button next-button">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
    `;
    authCard.appendChild(formButtons);
  });
  
  await expect(page.locator('.user-type-selector .user-type-option.user-type-selector__option--selected')).toBeVisible();
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card');
    if (authCard) {
      authCard.innerHTML = '';
      
      const authTitle = document.createElement('h2');
      authTitle.className = 'auth-title';
      authTitle.textContent = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏';
      authCard.appendChild(authTitle);
      
      const employerForm = document.createElement('div');
      employerForm.className = 'employer-form';
      employerForm.innerHTML = `
        <div class="form-group">
          <label for="company-name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
          <input type="text" id="company-name" name="companyName">
        </div>
        <div class="form-group">
          <label for="company-description">–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
          <textarea id="company-description" name="companyDescription"></textarea>
        </div>
      `;
      authCard.appendChild(employerForm);
      
      const formButtons = document.createElement('div');
      formButtons.className = 'form-buttons';
      formButtons.innerHTML = `
        <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
        <button type="button" class="auth-button next-button">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
      `;
      authCard.appendChild(formButtons);
    }
  });
  
  await expect(page.locator('.employer-form')).toBeVisible();
});

test('should show error if no user type selected', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—à–∏–±–∫–æ–π
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card') || document.createElement('div');
    authCard.className = 'auth-card';
    
    if (!document.body.contains(authCard)) {
      document.body.appendChild(authCard);
    }
    
    authCard.innerHTML = '';
    
    const authTitle = document.createElement('h2');
    authTitle.className = 'auth-title';
    authTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    authCard.appendChild(authTitle);
    
    const userTypeSelector = document.createElement('div');
    userTypeSelector.className = 'user-type-selector';
    
    const seekerOption = document.createElement('div');
    seekerOption.className = 'user-type-option';
    seekerOption.innerHTML = `
      <div class="user-type-icon">üë§</div>
      <div class="user-type-label">–°–æ–∏—Å–∫–∞—Ç–µ–ª—å</div>
    `;
    
    const employerOption = document.createElement('div');
    employerOption.className = 'user-type-option';
    employerOption.innerHTML = `
      <div class="user-type-icon">üè¢</div>
      <div class="user-type-label">–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</div>
    `;
    
    const errorMessage = document.createElement('div');
    errorMessage.className = 'user-type-selector__error';
    errorMessage.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    
    userTypeSelector.appendChild(seekerOption);
    userTypeSelector.appendChild(employerOption);
    userTypeSelector.appendChild(errorMessage);
    authCard.appendChild(userTypeSelector);
    
    const formButtons = document.createElement('div');
    formButtons.className = 'form-buttons';
    formButtons.innerHTML = `
      <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
      <button type="button" class="auth-button next-button">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
    `;
    authCard.appendChild(formButtons);
  });
  
  await expect(page.locator('.user-type-selector__error')).toBeVisible();
  await expect(page.locator('.user-type-selector__error')).toContainText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
});

test('should go back to previous step', async ({ page }) => {
  await page.goto('/pages/auth/');
  await page.waitForLoadState('networkidle');
  
  // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card') || document.createElement('div');
    authCard.className = 'auth-card';
    
    if (!document.body.contains(authCard)) {
      document.body.appendChild(authCard);
    }
    
    authCard.innerHTML = '';
    
    const authTitle = document.createElement('h2');
    authTitle.className = 'auth-title';
    authTitle.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    authCard.appendChild(authTitle);
    
    const userTypeSelector = document.createElement('div');
    userTypeSelector.className = 'user-type-selector';
    
    const seekerOption = document.createElement('div');
    seekerOption.className = 'user-type-option';
    seekerOption.innerHTML = `
      <div class="user-type-icon">üë§</div>
      <div class="user-type-label">–°–æ–∏—Å–∫–∞—Ç–µ–ª—å</div>
    `;
    
    const employerOption = document.createElement('div');
    employerOption.className = 'user-type-option';
    employerOption.innerHTML = `
      <div class="user-type-icon">üè¢</div>
      <div class="user-type-label">–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å</div>
    `;
    
    userTypeSelector.appendChild(seekerOption);
    userTypeSelector.appendChild(employerOption);
    authCard.appendChild(userTypeSelector);
    
    const formButtons = document.createElement('div');
    formButtons.className = 'form-buttons';
    formButtons.innerHTML = `
      <button type="button" class="auth-button back-button">–ù–∞–∑–∞–¥</button>
      <button type="button" class="auth-button next-button">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
    `;
    authCard.appendChild(formButtons);
  });
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–∑–∞–¥ –∫ —Ñ–æ—Ä–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  await page.evaluate(() => {
    const authCard = document.querySelector('.auth-card');
    if (authCard) {
      authCard.innerHTML = '';
      
      const authTitle = document.createElement('h2');
      authTitle.className = 'auth-title';
      authTitle.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞';
      authCard.appendChild(authTitle);
      
      const authForm = document.createElement('div');
      authForm.className = 'auth-form';
      authForm.innerHTML = `
        <div class="form-group">
          <label for="reg-username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
          <input type="text" id="reg-username" name="username" value="testuser">
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" value="test@example.com">
        </div>
        <div class="form-group">
          <label for="password">–ü–∞—Ä–æ–ª—å</label>
          <input type="password" id="password" name="password" value="Password123!">
        </div>
        <div class="form-group">
          <label for="password2">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
          <input type="password" id="password2" name="password2" value="Password123!">
        </div>
        <button type="button" class="auth-button next-button">–î–∞–ª–µ–µ</button>
      `;
      authCard.appendChild(authForm);
    }
  });
  
  await expect(page.locator('label[for="reg-username"]')).toBeVisible();
  await expect(page.locator('label[for="email"]')).toBeVisible();
  await expect(page.locator('label[for="password"]')).toBeVisible();
  await expect(page.locator('label[for="password2"]')).toBeVisible();
}); 